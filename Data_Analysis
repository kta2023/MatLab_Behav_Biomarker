AD b-marker project - data processing workflow
After DLC analysis (getting a csv file), go through this workflow
OF analysis
NOL test analysis
Depending on test type, run an appropriate section by updating key parameters.

1. OF analysis
1.1. Params
Essential parameters to be updated EVERYTIME
Key variable params are dur, TopL and BottomR.
To determine TopL and BottomR, use AVIviewer.vi.
clearvars;
close all;

%% probably fixed parameters
nBPs = 6; % # of body parts
hN = 8; % heatmap resolution - arbitrary
BoxL = 40; % physical distance of each box edge (in cm)
hBin = BoxL/hN;

%% variable parameters -- YOU MUST UPDATE THESE!!
% data folder path
Dpath = 'C:\Users\Katriona\Desktop\Batch 1\OF\Processed';

% key variable params
Ifile = fullfile(Dpath, 'Info.mat');
if fopen(Ifile) == -1
% exp duration (in sec)
dur = 20 * 60;
% caliburation (pixels/cm) -- use AVIviewer.vi (LabVIEW)
TopL = [28, 31]; % top left corner
BottomR = [396, 396]; % bottom right corner
% save the coordinate params
c.tl = TopL;
c.br = BottomR;
c.dur = dur;
save(Ifile, 'c');
else
load(Ifile);
TopL = c.tl;
BottomR = c.br;
dur = c.dur;
end

% some automatic calibration
CalX = (BottomR(1)-TopL(1))/BoxL;
CalY = (BottomR(2)-TopL(2))/BoxL;
XY0 = [TopL(1)/CalX, TopL(2)/CalY]; % calibrated top right

% create figs folder
mkdir(fullfile(Dpath, 'figs'));


1.2 Simple trajectory visualization
CSV = dir(fullfile(Dpath, '*filtered.csv')); % filtered csv file
MyFile = CSV(1).name;
fprintf([MyFile, '\n']);
OUT = [];

% load csv file
T = readtable(fullfile(Dpath, MyFile));

% frame2time
fNum = T{:,1}; % frame#
t_reso = dur/length(fNum);
Time = t_reso:t_reso:dur;

% construct coordinate matrix -- for all subsequent analyses
cData = zeros(length(fNum), 2, nBPs); % time x coordinate(x,y) x bp
for b = 1:nBPs % body parts
MyBid = 3*b-2;
cData(:, 1, b) = T{:,MyBid+1}/CalX; % x in cm
cData(:, 2, b) = T{:,MyBid+2}/CalY; % y in cm
end

% display - bodypart by bodypart
CO = jet(nBPs);
SpeedVect = zeros(nBPs,1);
figure;
for b = 1:nBPs % track all body parts
MyX = squeeze(cData(:,1,b));
MyY = squeeze(cData(:,2,b));
% trajectory
subplot(2,nBPs, b);
plot(MyX-XY0(1), MyY-XY0(2), 'k.-', 'MarkerSize', 1, 'Color', CO(b,:)); hold on;
hold off;
set(gca,'YDir', 'reverse');
axis([-2, 42, -2, 42]); axis square
xlabel('x (cm)');ylabel('y (cm)');
title(['bodypart#', num2str(b)]);
% heatmap
Distance = sum(sqrt(abs(diff(MyX)).^2 + abs(diff(MyY)).^2))/100; % in m
Speed = Distance/(dur/60);
SpeedVect(b) = Speed;
subplot(2, nBPs, b+nBPs);
HM = hist3([MyX-XY0(1), MyY-XY0(2)], 'ctrs', {hBin/2:hBin:BoxL-hBin/2 hBin/2:hBin:BoxL-hBin/2});
imagesc(fliplr(flipud(HM/sum(HM(:)))'), [0, 1/hN/2]);
axis off; axis square;
title(['avg speed: ', num2str(Speed), ' m/min']);
end

% outpus
OUT.time = Time;
OUT.cData = cData;
OUT.speed = SpeedVect;
save(fullfile(Dpath, 'meta.mat'), 'OUT');

% fig output
MySize = [nBPs*4 8]; % width, height
set(gcf, 'PaperUnits', 'inches');
set(gcf, 'PaperSize', MySize); % width, height (in inches)
set(gcf, 'PaperPosition', [0 0.1 MySize-0.2]); %[left, bottom, width, height]
print('-djpeg',fullfile(Dpath, 'figs',['BPtrajectory.jpg']),'-r300');


1.2. time-resolved trajectory analysis
MyBP = 1; % bodypart to be analyzed
TbinSize = 2*60; % bin size (in sec)
nBins = ceil(Time(end)/TbinSize); % the number of time bins

figure;
for t = 1:nBins
idx = find(Time > TbinSize*(t-1) & Time <= TbinSize*t);

MyCdata = squeeze(cData(idx,:,MyBP)); % only for one bodypart
MyX = MyCdata(:,1)-XY0(1);
MyY = MyCdata(:,2)-XY0(2);
% display - trajectory
subplot(2, nBins, t);
plot(MyX, MyY, 'b.-', 'MarkerSize', 1);
set(gca,'YDir', 'reverse');
axis([-2, 42, -2, 42]);
axis square
xlabel('x');ylabel('y');
% display - heatmap & speed
Distance = sum(sqrt(abs(diff(MyX)).^2 + abs(diff(MyY)).^2)); % in cm
Speed = Distance/(TbinSize/60)/100;

% heatmap
subplot(2, nBins, t+nBins);
HM = hist3([MyX-XY0(1), MyY-XY0(2)], 'ctrs', {hBin/2:hBin:BoxL-hBin/2 hBin/2:hBin:BoxL-hBin/2});
imagesc(fliplr(flipud(HM/sum(HM(:)))'), [0, 1/hN]);
axis off; axis square;
title([num2str(Speed), ' m/min']);
end

% fig output
MySize = [nBins*4 8]; % width, height
set(gcf, 'PaperUnits', 'inches');
set(gcf, 'PaperSize', MySize); % width, height (in inches)
set(gcf, 'PaperPosition', [0 0.1 MySize-0.2]); %[left, bottom, width, height]
print('-djpeg',fullfile(Dpath, 'figs',['Treso_Trajectory.jpg']),'-r300');


1.3. Cumulative travel distance
% display - bodypart by bodypart
CO = jet(nBPs);
Lbl = [];
figure;
for b = 1:nBPs % track all body parts
MyX = squeeze(cData(:,1,b));
MyY = squeeze(cData(:,2,b));
% trajectory
TravelD = sqrt(abs(diff(MyX)).^2 + abs(diff(MyY)).^2);
CumD = cumsum(TravelD)/100;
plot(Time(2:end)/60, CumD, 'k.-', 'MarkerSize', 1, 'Color', CO(b,:)); hold on;

Lbl{end+1} = ['bodypart#', num2str(b)];
end
hold off;
box off;
xlim([0, Time(end)/60]);
xlabel('min');ylabel('m');
legend(string(Lbl),'Location','northeastoutside');

% fig output
MySize = [8 6]; % width, height
set(gcf, 'PaperUnits', 'inches');
set(gcf, 'PaperSize', MySize); % width, height (in inches)
set(gcf, 'PaperPosition', [0 0.1 MySize-0.2]); %[left, bottom, width, height]
print('-djpeg',fullfile(Dpath, 'figs',['CumTdistance.jpg']),'-r300');


1.4 Extracting quantities
Speed and distance ... look at the BPtrajectory.jpg. The title of each colour map shows "average speed" in m/min.
Spending time at edge and centre ... cData contains the coordinate of each body part at a given frame. This is a sample script:
EdgeWidth = 5; % in cm -- definition of "edge" and "centre"
MyBP = 1; % bodypart of interest
BoxSize = 40; % box size

MyCs = squeeze(cData(:,:,MyBP)); % a sequence of bodypart coordinates
nFrames = size(MyCs,1); % the number of frames
nCentre = length(find(MyCs(:,1)>=EdgeWidth & MyCs(:,1)<=BoxSize-EdgeWidth & ...
MyCs(:,2)>=EdgeWidth & MyCs(:,2)<=BoxSize-EdgeWidth));

fprintf(['# of frames at centre: ', num2str(nCentre), ' frames\n']);
fprintf(['# of frames at edge: ', num2str(nFrames - nCentre), ' frames\n']);


2. NOL test analysis for both encoding/retention phases
2.1. Params
Essential parameters to be updated EVERYTIME
Key variable params are dur, TopL and BottomR.
To determine TopL and BottomR, use AVIviewer.vi.
This and the following sections are for both EN and RE. By changing parameters, run this accordingly.
clearvars;
close all;

%% probably fixed parameters
nBPs = 9; % # of body parts
hN = 8; % heatmap resolution - arbitrary
BoxL = 40; % physical distance of each box edge (in cm)
hBin = BoxL/hN;
dur = 10 * 60; % exp duration (in sec)

%% variable parameters -- YOU MUST UPDATE THESE!!
% data folder path
Dpath = 'C:\Users\gwb10149\Desktop\Processed';

% caliburation (pixels/cm) -- use AVIviewer.vi (LabVIEW)
Cfile = fullfile(Dpath, 'Cinfo.mat');
if fopen(Cfile) == -1
TopL = [15, 61]; % top left corner
BottomR = [317, 386]; % bottom right corner
ObA = [252, 281]; % variable object
ObB = [108, 281]; % fixed object
ObDia = 43; % object diameter (in pixel)

% save the coordinate params
c.tl = TopL;
c.br = BottomR;
c.oa = ObA;
c.ob = ObB;
c.od = ObDia;
save(Cfile, 'c');
else
load(Cfile);
TopL = c.tl;
BottomR = c.br;
ObA = c.oa;
ObB = c.ob;
ObDia = c.od;
end

% some automatic calibration
CalX = (BottomR(1)-TopL(1))/BoxL;
CalY = (BottomR(2)-TopL(2))/BoxL;
XY0 = [TopL(1)/CalX, TopL(2)/CalY]; % calibrated top right
objA = [ObA(1)/CalX, ObA(2)/CalY];
objB = [ObB(1)/CalX, ObB(2)/CalY];
objDia = ObDia/((CalX+CalY)/2); % for simplicity

% create figs folder
mkdir(fullfile(Dpath, 'figs'));

2.2. Simple trajectory visualization
CSV = dir(fullfile(Dpath, '*filtered.csv')); % filtered csv file
MyFile = CSV(1).name;
fprintf([MyFile, '\n']);
OUT_All = [];

% load csv file
T = readtable(fullfile(Dpath, MyFile));

% frame2time
fNum = T{:,1}; % frame#
t_reso = dur/length(fNum);
Time = t_reso:t_reso:dur;

% construct coordinate matrix -- for all subsequent analyses
cData = zeros(length(fNum), 2, nBPs); % time x coordinate(x,y) x bp
for b = 1:nBPs % body parts
MyBid = 3*b-2;
cData(:, 1, b) = T{:,MyBid+1}/CalX; % x in cm
cData(:, 2, b) = T{:,MyBid+2}/CalY; % y in cm
end

% display - bodypart by bodypart
CO = jet(nBPs);
SpeedVect = zeros(nBPs,1);
figure;
for b = 1:nBPs % track all body parts
subplot(2,nBPs, b);
% trajectory
MyX = squeeze(cData(:,1,b));
MyY = squeeze(cData(:,2,b));
plot(MyX-XY0(1), MyY-XY0(2), 'k.-', 'MarkerSize', 1, 'Color', CO(b,:)); hold on;

% objects
plot(objA(1)-XY0(1), objA(2)-XY0(2), 'bx');
plot(objB(1)-XY0(1), objB(2)-XY0(2), 'rx'); hold off;
set(gca,'YDir', 'reverse');
axis([-2, 42, -2, 42]); axis square
xlabel('x (cm)');ylabel('y (cm)');
title(['bodypart#', num2str(b)]);
% heatmap
Distance = sum(sqrt(abs(diff(MyX)).^2 + abs(diff(MyY)).^2))/100; % in m
Speed = Distance/(dur/60);
subplot(2, nBPs, b+nBPs);
HM = hist3([MyX-XY0(1), MyY-XY0(2)], 'ctrs', {hBin/2:hBin:BoxL-hBin/2 hBin/2:hBin:BoxL-hBin/2});
imagesc(fliplr(flipud(HM/sum(HM(:)))'), [0, 1/hN/2]);
% imagesc(HM/sum(HM(:))', [0, 1/hN/2]);
axis off; axis square;
title(['avg speed: ', num2str(Speed), ' m/min']);
end

% outpus
OUT_All.time = Time;
OUT_All.cData = cData;
OUT_All.speed = SpeedVect;
save(fullfile(Dpath, 'meta_all.mat'), 'OUT_All');

% fig output
MySize = [nBPs*4 8]; % width, height
set(gcf, 'PaperUnits', 'inches');
set(gcf, 'PaperSize', MySize); % width, height (in inches)
set(gcf, 'PaperPosition', [0 0.1 MySize-0.2]); %[left, bottom, width, height]
print('-djpeg',fullfile(Dpath, 'figs','BPtrajectory.jpg'),'-r300');

2.2. time-resolved trajectory analysis
MyBP = 1; % bodypart to be analyzed
TbinSize = 2*60; % bin size (in sec)
nBins = ceil(Time(end)/TbinSize); % the number of time bins

figure;
for t = 1:nBins
idx = find(Time > TbinSize*(t-1) & Time <= TbinSize*t);

MyCdata = squeeze(cData(idx,:,MyBP)); % only for one bodypart
MyX = MyCdata(:,1)-XY0(1);
MyY = MyCdata(:,2)-XY0(2);
% display - trajectory
subplot(2, nBins, t);
plot(MyX, MyY, 'b.-', 'MarkerSize', 1);hold on;
plot(objA(1)-XY0(1), objA(2)-XY0(2), 'bx');
plot(objB(1)-XY0(1), objB(2)-XY0(2), 'rx');hold off;
set(gca,'YDir', 'reverse');
axis([-2, 42, -2, 42]);
axis square
xlabel('x');ylabel('y');
% display - heatmap & speed
Distance = sum(sqrt(abs(diff(MyX)).^2 + abs(diff(MyY)).^2)); % in cm
Speed = Distance/(TbinSize/60)/100;

% heatmap
subplot(2, nBins, t+nBins);
HM = hist3([MyX-XY0(1), MyY-XY0(2)], 'ctrs', {hBin/2:hBin:BoxL-hBin/2 hBin/2:hBin:BoxL-hBin/2});
imagesc(fliplr(flipud(HM/sum(HM(:)))'), [0, 1/hN]);
axis off; axis square;
title([num2str(Speed), ' m/min']);
end

% fig output
MySize = [nBins*4 8]; % width, height
set(gcf, 'PaperUnits', 'inches');
set(gcf, 'PaperSize', MySize); % width, height (in inches)
set(gcf, 'PaperPosition', [0 0.1 MySize-0.2]); %[left, bottom, width, height]
print('-djpeg',fullfile(Dpath, 'figs','Treso_Trajectory.jpg'),'-r300');

2.3. location analysis
OUT_obj = [];
MyBP = 1; % bodypart to be analyzed

% cooridinates
MyX = squeeze(cData(:,1,MyBP));
MyY = squeeze(cData(:,2,MyBP));

% relative distance from objA
Adis = sqrt((MyX - objA(1)).^2 + (MyY - objA(2)).^2); % in cm
Bdis = sqrt((MyX - objB(1)).^2 + (MyY - objB(2)).^2);

% display - distance between nose and objects
figure; subplot(2,2, [1, 2]);
plot(Time, objDia*ones(length(Time),1)/2, 'k:'); hold on;
plot(Time, Adis, 'b');
plot(Time, Bdis, 'r'); hold off;
legend('obj rad', 'from A', 'from B');
box off;
xlabel('sec'); ylabel('cm');

% exploratory analysis - relation between distance and occupancy rate
ExpRange = objDia/2:0.1*objDia:10*objDia;
nBins = length(ExpRange);
nPoints = length(Time);
ExpMat = zeros(nBins,2);
for e = 1:nBins
ExpMat(e,1) = length(find(Adis <= ExpRange(e)))/nPoints;
ExpMat(e,2) = length(find(Bdis <= ExpRange(e)))/nPoints;
end

% display
subplot(223);
plot(ExpRange, ExpMat(:,1), 'b.-'); hold on;
plot(ExpRange, ExpMat(:,2), 'r.-'); hold off;
box off;
xlabel('distance from object centre (cm)');
ylabel('fraction');
xlim([0, ExpRange(end)]);
ylim([0 1]);

subplot(224);
DisIdx = (ExpMat(:,1) - ExpMat(:,2))./(ExpMat(:,1) + ExpMat(:,2)); % discrimination index
plot([0, ExpRange(end)], zeros(1,2), 'k:'); hold on;
plot(ExpRange, DisIdx, 'g.-'); hold off;
box off;
xlabel('distance from object centre (cm)');
ylabel('discrimination index');
xlim([0, ExpRange(end)]);
ylim([-1, 1]);

% outputs - not to save yet
OUT_obj.bp = MyBP;
OUT_obj.time = Time;
OUT_obj.Adis = Adis;
OUT_obj.Bdis = Bdis;

% fig output
MySize = [10 8]; % width, height
set(gcf, 'PaperUnits', 'inches');
set(gcf, 'PaperSize', MySize); % width, height (in inches)
set(gcf, 'PaperPosition', [0 0.1 MySize-0.2]); %[left, bottom, width, height]
print('-djpeg',fullfile(Dpath, 'figs',['ObjDistanceAnalysis.jpg']),'-r300');

2.4 time-resolved location analysis
% params
ExpThre = 2; % arbitrary, but crucial variable to define the range of "exploratory" zone for each obj
TbinSize = 2*60; % bin size (in sec)
nBins = ceil(Time(end)/TbinSize); % the number of time bins


DisIdx = zeros(nBins,1);
for t = 1:nBins
idx = find(Time > TbinSize*(t-1) & Time <= TbinSize*t);
nPoints = length(idx);
MyAfraction = length(find(Adis(idx) <= ExpThre*objDia))/nPoints;
MyBfraction = length(find(Bdis(idx) <= ExpThre*objDia))/nPoints;
DisIdx(t) = (MyAfraction - MyBfraction)/(MyAfraction + MyBfraction);
end

T = TbinSize:TbinSize:nBins*TbinSize;
figure;
plot([0, T(end)], zeros(1,2), 'k:'); hold on;
plot(T, DisIdx, 'go-'); hold off;
xlabel('sec'); ylabel('discrimination index');
box off;
xlim([0 T(end)]);
ylim([-1, 1]);

% outputs
OUT_obj.thre = ExpThre;
OUT_obj.T = T;
OUT_obj.dIdx = DisIdx;
save(fullfile(Dpath, 'meta_obj.mat'), 'OUT_obj');

% fig output
MySize = [8 6]; % width, height
set(gcf, 'PaperUnits', 'inches');
set(gcf, 'PaperSize', MySize); % width, height (in inches)
set(gcf, 'PaperPosition', [0 0.1 MySize-0.2]); %[left, bottom, width, height]
print('-djpeg',fullfile(Dpath, 'figs','Dindex.jpg'),'-r300');

2.5 cumulative D-index
% params
% ExpThre = 2; % arbitrary, but crucial variable to define the range of "exploratory" zone for each obj
TbinSize = 1*60; % bin size (in sec)
TbinInc = 1*60; % incremental resolution
nBins = ceil((Time(end)-TbinSize)/TbinInc)+1; % the number of time bins

DisIdx = zeros(nBins,1);
for t = 1:nBins
idx = find(Time <= TbinSize + TbinInc*(t-1));
nPoints = length(idx);
MyAfraction = length(find(Adis(idx) <= ExpThre*objDia))/nPoints;
MyBfraction = length(find(Bdis(idx) <= ExpThre*objDia))/nPoints;
DisIdx(t) = (MyAfraction - MyBfraction)/(MyAfraction + MyBfraction);
end

T = TbinSize:TbinInc:T(end);
figure;
plot([0, T(end)], zeros(1,2), 'k:'); hold on;
plot(T, DisIdx, 'go-'); hold off;
xlabel('sec'); ylabel('discrimination index');
box off;
xlim([0 T(end)]);
ylim([-1, 1]);
title('cumulative d-index')

% outputs
OUT_obj.thre = ExpThre;
OUT_obj.T = T;
OUT_obj.dIdx = DisIdx;
save(fullfile(Dpath, 'meta_obj_cum.mat'), 'OUT_obj');

% fig output
MySize = [8 6]; % width, height
set(gcf, 'PaperUnits', 'inches');
set(gcf, 'PaperSize', MySize); % width, height (in inches)
set(gcf, 'PaperPosition', [0 0.1 MySize-0.2]); %[left, bottom, width, height]
print('-djpeg',fullfile(Dpath, 'figs','CumulativeDindex.jpg'),'-r300');


2.6 Extracting quantities
D-index ... DisIdx contains d-index as a function of duration. T is the time vector.
Exploration time ... Adis and Bdix contrains distance from the object A and B as a function of frame#, respectively.

OUT_obj = [];
MyBP = 2; % bodypart to be analyzed

% params
ExpThre = 1.5; % arbitrary, but crucial variable to define the range of "exploratory" zone for each obj

% cooridinates
MyX = squeeze(cData(:,1,MyBP));
MyY = squeeze(cData(:,2,MyBP));

% relative distance from objA
Adis = sqrt((MyX - objA(1)).^2 + (MyY - objA(2)).^2); % in cm
Bdis = sqrt((MyX - objB(1)).^2 + (MyY - objB(2)).^2);

% exploration as a percentage of total experimental time
MyAfraction = length(find(Adis <= ExpThre*objDia));
MyBfraction = length(find(Bdis <= ExpThre*objDia));
Exploration = (MyAfraction + MyBfraction)/ceil(Time(end))

